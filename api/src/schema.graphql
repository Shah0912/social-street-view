type Post {
   _id: Long!
   id: String!
   latitude: String
   likes: String! @cypher(statement:"MATCH (this)<-[:likes]-(u:User) RETURN count(u)")
   longitude: String
   tags: String
   users_posted: [User] @relation(name: "posted", direction: "IN")
   has_image: [Image] @relation(name:"has",direction: "OUT")
   has_video: [Video] @relation(name:"has",direction: "OUT")
   has_text: [Image] @relation(name:"has",direction: "OUT")
}

type Image {
   _id: Long!
   id: String!
   caption: String!
   url: String!
   timestamp: String!
   posts: [Post] @relation(name: "has", direction: "IN")
   users_likes: [User] @relation(name: "likes", direction: "IN")
   comments_on: [Comment] @relation(name: "on", direction: "IN")
}

type Video {
   _id: Long!
   id: String!
   caption: String!
   url: String!
   timestamp: String!
   posts: [Post] @relation(name: "has", direction: "IN")
}

type Text {
   _id: Long!
   id: String!
   data: String!
   timestamp: String!
   posts: [Post] @relation(name: "has", direction: "IN")
}

type Comment {
   _id: Long!
   id: String!
   sentiment: Int
   dist_id: Int @cypher(statement:"MATCH (d:District),(this) WHERE EXISTS(d.polygon) AND spatial.algo.withinPolygon(Point({latitude:toFloat(this.latitude), longitude:toFloat(this.longitude)}),d.polygon) RETURN (d.cartodb_id)")
   text: String!
   latitude: String
   longitude: String
   timestamp: String!
   on: [Image] @relation(name: "on", direction: "OUT")
   users: [User] @relation(name: "commented", direction: "IN")
}

type District {
   _id: Long!
   cartodb_id: Int!
   engtype_2: String!
   id_0: Int!
   id_1: Int!
   id_2: Int!
   iso: String!
   name_0: String!
   name_1: String!
   name_2: String!
   polygon: [Point]!
   pop: Int!
   pop_prop_2011: String!
   type_2: String!
   varname_2: String
}

type User {
   _id: Long!
   email: String!
   followers: Int! @cypher(statement:"MATCH (this)<-[:follows]-(u:User) RETURN count(u)")
   # gender: String!
   # id: String!
   name: String!
   # phonenumber: Int!
   profileImg: String!
   # username: String!
   follows: [User] @relation(name: "follows", direction: "OUT")
   posted: [Post] @relation(name: "posted", direction: "OUT")
   commented: [Comment] @relation(name: "commented", direction: "OUT")
   likes: [Image] @relation(name: "likes", direction: "OUT")
}

input TransformImageOptionsInput {
   width: Int
   height: Int
   crop: String
}

input UploadOptionsInput {
    public_id: String
    folder: String
    use_filename: Boolean
    unique_filename: Boolean
    resource_type: String
    type: String
    access_mode: String
    discard_original_filename: Boolean
    overwrite: Boolean
    tags: [TagInput]
    colors: Boolean
    faces: Boolean
    quality_analysis: Boolean
    cinemegraph_analysis: Boolean
    image_metadata: Boolean
    phash: Boolean
    auto_tagging: Boolean
    categorization: [CategoryInput]
  }

input CategoryInput {
   name: String
}

input TagInput {
   tag_name: String!
}

type Tag {
   tag_name: String!
}

type UploadedImage {
   public_id: String!
   version: String!
   width: Int!
   height: Int!
   format: String!
   created_at: String!
   resource_type: String!
   tags: [Tag]! 
   bytes: Int!
   type: String!
   etag: String!
   url: String!
   secure_url: String!
   signature: String!
   original_filename: String!
}

type ImageUrl {
   imageLink: String!
}


type Mutation {
  photo(file: String, id: String, caption: String): Image
  video(file: String, id: String, caption: String): Video
  text(file: String, id: String, caption: String): Text
  uploadImage(file: String! uploadOptions: UploadOptionsInput) : UploadedImage!
}


type Query {
  getImageUrl(
    imageName: String!
    transformOptions: TransformImageOptionsInput
  ): ImageUrl!
  getSuggestions(email: String!): [User]
    # @isAuthenticated
    @cypher(
      statement: """
      MATCH (u: User{email: $email}) - [:follows] -> (f:User) - [:follows] -> (ans: User)
      WHERE(u.email <> ans.email)
      RETURN ans;
      """
    )
}